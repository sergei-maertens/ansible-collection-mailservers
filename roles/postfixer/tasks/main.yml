---

# Deploy the postfixer app with docker


- name: Ensure a separate network exists
  docker_network:
    name: "{{ postfixer_network }}"

- name: Create a volume for the logs  # TODO: should just output to stdout
  docker_volume:
    name: "{{ postfixer_name_prefix }}-logs"

- name: Determine volumes to mount
  set_fact:
    _postfix_container_volumes: "{{ __postfixer_base_volumes + [__postfixer_db_socket_volume] }}"
  when: postfixer_db_host.startswith('/')

- name: Inspect app container
  docker_container_info:
    name: "{{ postfixer_name_prefix }}-web"
  register: postfixer_container

- name: Define existing published port
  set_fact:
    postfixer_port: "{{ postfixer_container.container.NetworkSettings.Ports['8000/tcp'][0].HostPort }}"
  when: postfixer_container.exists and not postfixer_port is defined

- name: Determine if fixed port or range
  set_fact:
    _postfix_host_port: "{{ postfixer_port if postfixer_port is defined else postfixer_ports }}"

- name: Ensure web container runs
  docker_container:
    container_default_behavior: no_defaults
    name: "{{ postfixer_name_prefix }}-web"
    hostname: "{{ postfixer_name_prefix }}-web"
    image: "{{ postfixer_image }}"
    pull: "{{ postfixer_image_pull }}"

    state: started
    restart: no
    restart_policy: always

    networks:
      - name: "{{ postfixer_network }}"
    network_mode: "{{ postfixer_network }}"
    purge_networks: yes
    networks_cli_compatible: yes

    privileged: no

    log_driver: json-file
    log_options:
      max-size: 10m
      max-file: '10'

    volumes: "{{ _postfix_container_volumes }}"

    env:
      SECRET_KEY: "{{ postfixer_secret_key | mandatory }}"
      ALLOWED_HOSTS: "localhost,{{ postfixer_hostname }}"
      DB_HOST: "{{ postfixer_db_host }}"
      DB_PORT: "{{ postfixer_db_port | string }}"
      DB_NAME: "{{ postfixer_db_name }}"
      DB_USER: "{{ postfixer_db_user }}"
      DB_PASSWORD: "{{ postfixer_db_password }}"
      LIMIT_DOMAINS_TO: "{{ postfixer_allowed_domains|join(',') }}"

    published_ports:
      - "127.0.0.1:{{ _postfix_host_port }}:8000"

  register: postfixer_container

- name: Define the postfixer port if it is not defined yet
  set_fact:
    postfixer_port: "{{ postfixer_container.container.NetworkSettings.Ports['8000/tcp'][0].HostPort }}"
  when: postfixer_port is not defined
