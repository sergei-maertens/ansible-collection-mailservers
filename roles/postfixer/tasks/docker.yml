---

# Deploy the postfixer app with docker

- name: Ensure certificates are present
  ansible.builtin.include_role:
    name: maykinmedia.commonground.django_app_docker
    public: true
  vars:
    django_app_docker_name_prefix: "{{ postfixer_name_prefix }}"
    django_app_docker_domain: "{{ postfixer_hostname }}"
    django_app_docker_secret_key: "{{ postfixer_secret_key|mandatory }}"

    django_app_docker_db_host: "{{ postfixer_db_host }}"
    django_app_docker_db_port: "{{ postfixer_db_port }}"
    django_app_docker_db_name: "{{ postfixer_db_name }}"
    django_app_docker_db_username: "{{ postfixer_db_user }}"
    django_app_docker_db_password: "{{ postfixer_db_password }}"

    django_app_docker_sentry_dsn: "{{ postfixer_sentry_dsn }}"

    # Container image to use
    django_app_docker_version: "{{ postfixer_version }}"
    django_app_docker_image_name: "{{ postfixer_image_name }}"
    django_app_docker_image_always_pull: "{{ postfixer_image_pull }}"

    # Host system interaction
    django_app_docker_replicas: "{{ postfixer_replicas }}"
    django_app_docker_port_range:
      start: 8000
      end: 9000
    django_app_docker_volumes:
      - name: "{{ postfixer_name_prefix }}-media"
        mount: "/app/media"
        # hostPath: ''  # optional to bind-mount instead of creating a docker volume
        mode: "rw"
        owner: 1000
      # TODO: configure container to log to STDOUT instead
      - name: "{{ postfixer_name_prefix }}-logs"
        mount: "/app/log"
        # hostPath: ''  # optional to bind-mount instead of creating a docker volume
        mode: "rw"
        owner: 1000
    django_app_docker_container_user: "{{ postfixer_container_user }}"

    # Celery integration
    django_app_docker_use_celery: false
    django_app_docker_use_celery_beat: false
    django_app_docker_use_flower: false

    django_app_docker_mail: false  # TODO -> set up email for password resets etc.

    django_app_docker_extra_env:
      LIMIT_DOMAINS_TO: "{{ postfixer_allowed_domains|join(',') }}"
